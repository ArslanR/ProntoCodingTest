/**
 * Source code for Pronto Woven coding test in JAVA.
 * This code asks the user to input commands to control a robot and then outputs the distance (in units) the robot has travelled.
 *
 * @author Arslan Rashid
 * @date [12/10/2019] 
 * @version [1.04] 
 * 
 */

import java.util.Arrays;
import java.util.ArrayList; 
import java.util.Scanner;

public class Robot
{
    // instance variables 
    private int x;
    private int direction;
    private int p1;
    private int p2;
    private boolean check = true;
    private String str;
    private String[] a;;
    private int[] arr;
    private String[] b;
    private int size;
    
    /**
     * Constructor for objects of class Robot
     */
    public Robot()
    {
        // initialise instance variables
        x = 0;
        direction = 0;
        p1 = 0;
        p2 = 0;
        check = true;
        str = null;
        a = null;
        arr = null;
        b= null;
        size = 0;
    }

   public void main(){
         int short_dist=0;
         String exit = "x";
         
         while(exit.equals("x")){
             input();  
    
             for(int i=0; i<size; i++)
                  calculateNewDirPos(arr, b, i);
    
             short_dist = calculateDistance(p1, p2);
             
             System.out.println("Shortest Distance to origin = " + short_dist + "\n");
             System.out.println("Press x to repeat: ");
         
             x = 0;
             direction = 0;
             p1 = 0;
             p2 = 0;
             check = true;
             str = null;
             a = null;
             arr = null;
             b= null;
             size = 0;
         
         
             Scanner input = new Scanner(System.in);
             exit = input.nextLine();
             check = true;
        }
}
    //User input and its validation
    public void input(){
        while (check){
            
            str = menu();
            
            //validation
            if (str.length() < 2 || str.matches("[^a-zA-Z0-9]*"))
                System.out.println("Error! Please try with a correct input.");
                    
            else{
                
                a = str.split(",");
                size = a.length;
                b = new String[size] ;
                
                for (int i = 0; i < a.length; i++) {
                   b[i]= a[i].substring(0,1);
                   a[i] = a[i].substring(1);
                }
        
              
                arr = new int [size];
                
                for(int i=0; i<size; i++){ 
                    try { 
                           arr[i] = Integer.parseInt(a[i]); //conversion of string [] to int []
                        }  
                        
                    catch(NumberFormatException e) { 
                           System.out.println("Error! Please try again. "); 
                        }   
                    } 
                    
                //validation
                for(int i=0; i<size; i++) {
                      if (arr[i] <= 0)
                           System.out.println("Error! Number should be greater than 0.");
                    
                      else if (b[i].equals("F") || b[i].equals("B") || b[i].equals("R") || b[i].equals("L") ) 
                           check = false;
                             
                      else 
                           System.out.println("Error! incorrect letter entered.");
                   }
        }
    }
}
    
    //Calculating shortest distance of robot to its original position
    public int calculateDistance(int p1, int p2)
    {
        int dist = 0;
        if (p1>0)
             {
                 for(int k1=p1;k1>0;k1--)
                    dist=dist+1;
             }
             
        else if (p1<0)
             {
                 for(int k=p1;k<0;k++)
                    dist=dist+1;
             }
        
          if (p2>0)
             {
                 for(int k3=p2;k3>0;k3--)
                    dist=dist+1;
             }
             
          else if (p2<0)
             {
                 for(int k4=p2;k4<0;k4++)
                    dist=dist+1;
             }
             
        return dist;
    }
    
    //main menu of the robot control interface
     public String menu(){
         
         System.out.println("*********************************************************************");   
         System.out.println("                  Welcome to Robot's control interface!");
         System.out.println("*********************************************************************");
         System.out.println("*********************************************************************");
         System.out.println("Use the following commands to move the robot and get the shortest");
         System.out.println("distance from its current position to it's starting position:");
         
         System.out.println("`F` - move forward 1 unit.");
         System.out.println("`B` - move backward 1 unit.");
         System.out.println("`R` - turn right 90 degrees.");
         System.out.println("`L` - turn left 90 degrees.");
         System.out.println("[Please note that the commands can be one or more than one commands");
         System.out.println("separated by a comma (e.g F1,B1...)]");
         System.out.println("*********************************************************************");
         Scanner input = new Scanner(System.in);
         String number = input.nextLine();
         return number;
    
    }

//Calculating directions and positions
public void calculateNewDirPos(int[] a, String[] b, int i){

      if (b[i].equals("L"))
            {
                int x= 0;
                x=a[i]%4;
                x=4-x;
                direction=(direction+x)%4;
                System.out.println("direction after left: " + direction);
    
            }
            
       else if (b[i].equals("R"))
            {
                int x= 0;
                x=a[i];
                direction=(direction+x)%4;
                System.out.println("direction after right: " + direction);
             }
             
       else if (b[i].equals("F"))
            {
                if (direction==0)
                    p2=p2+a[i];

                else if (direction==1)
                    p1=p1+a[i];

                else if (direction==2)
                    p2=p2-a[i];

                else if (direction==3)
                    p1=p1-a[i];    
             } 
       
        else if (b[i].equals("B"))
            {
                if (direction==0)
                    p2=p2-a[i];

                else if (direction==1)
                    p1=p1-a[i];

                else if (direction==2)
                    p2=p2+a[i];

                else if (direction==3)
                    p1=p1+a[i];
             }
    }

}

